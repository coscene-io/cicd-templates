name: Common Java deploy

on:
  workflow_call:
    inputs:
      project:
        description: 'the name of project to be built and the corresponding image'
        required: true
        type: string
      sub-chart:
        description: 'the name of sub chart'
        required: true
        type: string

    outputs:
      tag:
        value: ${{ jobs.build.outputs.tag }}

env:
  AZURE: coseus.azurecr.io
  ALICLOUD: registry.cn-hangzhou.aliyuncs.com/coscene

jobs:
  build:
    runs-on: ubuntu-latest
    environment: azure-dev-east-us
    outputs:
      tag: ${{ steps.build-and-push.outputs.TAG }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'
      - name: Gradle build
        uses: gradle/gradle-build-action@v2
        env:
          REPOSITORY_USERNAME: ${{ secrets.GH_PACKAGES_ORG_USERNAME }}
          REPOSITORY_TOKEN: ${{ secrets.GH_PACKAGES_ORG_TOKEN }}
        with:
          arguments: build -x test -x check
      - name: ACR login
        uses: docker/login-action@v2
        with:
          registry: coseus.azurecr.io
          username: ${{ secrets.ACR_ADMIN_USERNAME }}
          password: ${{ secrets.ACR_ADMIN_PASSWORD }}
      - uses: coscene-io/setup-cd-tools@v2.0.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          skaffold: '2.0.3'
      - name: Build and push images
        id: build-and-push
        run: |
          skaffold build --build-concurrency=0 -t latest
          result=$(skaffold build --build-concurrency=0 -q | jq '.builds[0].tag')
          echo $result
          withoutRegistry=${result#*:}
          echo $withoutRegistry
          withoutDigest=${withoutRegistry%@*}
          echo $withoutDigest
          echo "TAG=${withoutDigest}" >> $GITHUB_OUTPUT

  cp-image-to-aliyun:
    needs:
      - build
    uses: coscene-io/cicd-templates/.github/workflows/cp-image-to-aliyun.yml@chore/del-redundant-inputs
    with:
      project: platform
      tag: ${{ needs.build.outputs.tag }}
    secrets: inherit

#  deploy:
#    needs:
#      - build
#    runs-on: ubuntu-latest
#    environment: azure-dev-east-us
#    steps:
#      - name: AKS login
#        uses: azure/k8s-set-context@v3
#        with:
#          method: kubeconfig
#          kubeconfig: ${{ secrets.AZURE_KUBE_CONFIG }}
#      - name: Setup helmfile
#        uses: mamezou-tech/setup-helmfile@v1.2.0
#        with:
#          helmfile-version: "v0.148.1"
#          helm-version: "v3.10.2"
#          additional-helm-plugins: https://github.com/aslafy-z/helm-git --version 0.14.0
#      - name: Helm Add coScene Repo
#        env:
#          REPOSITORY_TOKEN: ${{ secrets.GH_PACKAGES_ORG_TOKEN }}
#        run: |
#          helm repo add coscene git+https://$REPOSITORY_TOKEN@github.com/coscene-io/chart@\?ref=main
#      - name: Helm Upgrade
#        run: |
#          helm upgrade -n coscene --reuse-values coscene coscene/coscene --set ${{ inputs.sub-chart }}.rollout=$GITHUB_SHA
#      - name: Notification to Feishu
#        uses: foxundermoon/feishu-action@v2
#        with:
#          url: ${{ secrets.FEISHU_BOT_WEBHOOK_URL_RHODE_ISLAND }}
#          msg_type: text
#          content: |
#            text: |
#              A new version of ${{ github.repository }} has been deployed.
#              GitHubEvent: ${{ github.event_name }}
#              committer: ${{ github.actor }}
#              baseRef: ${{ github.ref }}

  callout:
    needs:
      - build
      - cp-image-to-aliyun
#    if: |
#      needs.cp-image-to-aliyun.outputs.success == 'true'
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.build.outputs.tag }}
    steps:
#      - name: debug
#        run: |
#          echo ${{ needs.cp-image-to-aliyun.outputs.success }}
#          echo ${{ needs.cp-image-to-aliyun.outputs.timeout }}
      - name: Add summary
        run: |
          echo '## Image Summary :rocket:' >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME" >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_ACTOR: $GITHUB_ACTOR" >> $GITHUB_STEP_SUMMARY
          echo "GITHUB_REF: $GITHUB_REF" >> $GITHUB_STEP_SUMMARY
          echo "Azure image: $AZURE/${{ inputs.project }}:$TAG" >> $GITHUB_STEP_SUMMARY
          echo "Azure image: $AZURE/${{ inputs.project }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "AliCloud image: $ALICLOUD/${{ inputs.project }}:$TAG" >> $GITHUB_STEP_SUMMARY
          echo "AliCloud image: $ALICLOUD/${{ inputs.project }}:latest" >> $GITHUB_STEP_SUMMARY
#      - name: Notification to Feishu
#        uses: foxundermoon/feishu-action@v2
#        with:
#          url: ${{ secrets.FEISHU_BOT_WEBHOOK_URL_IMAGE_BROADCAST }}
#          msg_type: text
#          content: |
#            text: |
#              A new version of ${{ github.repository }} image has been published.
#              GitHubEvent: ${{ github.event_name }}
#              committer: ${{ github.actor }}
#              baseRef: ${{ github.ref }}
#              Azure image: ${{ env.AZURE }}/${{ inputs.project }}:${{ env.TAG }}
#              Azure image: ${{ env.AZURE }}/${{ inputs.project }}:latest
#              AliCloud image: ${{ env.ALICLOUD }}/${{ inputs.project }}:${{ env.TAG }}
#              AliCloud image: ${{ env.ALICLOUD }}/${{ inputs.project }}:latest
